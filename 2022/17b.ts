const jetPattern = '>><<<>><<<<>>><>><>>><<<>>>><>>><<><<<>>>><<<><<<><<><<<>>>><<><<>>><<<<>><<>><<<><<<<>><<<<><>>><<<<>>><<<>>>><<<>>>><<<<>>><<>>><<>>>><<<<>>>><<<<>><>>>><<<<>>><<>><>>><>>><<<<>>><<>>><>><<<>>>><<>>>><<<>>><<<>>>><<<<><<<><<>>><>><<<<>><>><<><<<<>>><<>>><<<>>>><<<<>>><<>>>><<<<>><>><<<><<>><<<>>>><<<>><<<<>>>><<<><<<<>>><<><>>><<>><<<>>><<<<>>><<>>>><<<>>><<<<>>><<>>>><<<<>><<>>>><<<>>>><<>>><<><<<>>><<<<>>>><<<<>>><<<>>>><<<<>><<<>>>><>>><><<>>><<<><<>>>><<<>>>><<><<<<>>>><<<><<>><<<<>>>><<>>><>>>><<<<>><<>>><<>>><<>><>><><<<<>>>><<<>><<>>><<><<<<>>>><<<<><<<<>>>><><<>>><><>>><<>>><>>><>>>><<>><><<>><>>><<>>>><<>>>><<<<><<<>>>><>><>>>><<<<><<<><<<>>>><<><<>><<<>>><<<<>>><<<<><<>>><<<>>>><<><<<<>><<<<>><<<><>><>>>><><<<>>><<<<><<<<>><>>><<<>><<<<><<<>>>><<<>>>><<<>><<>><<<<>><<<<>><>>>><<>>>><<<<>>><<>>>><<>>>><>><<<>>>><<<<>>><<<<><>>>><<><<<>><<<<>>>><<<<>><>>>><<<>>>><<<<>>>><<<<>>><<<<>><>>><<<<><>>>><<><>>>><>><<>>>><>>>><<>><<>>><<<>>>><<><<<>>>><<><<>><<<<>>><<<>>><<<<>><<<><<<>>><<><<>>>><<<>>><<>>><<<><<<<>>><>>>><<<>>><<<>>>><<><><<>>>><<>>>><<>>>><<>>><<>><<><<<>>><>>><<<<>>>><>>>><<<>><>><<<<>>><<<<>>><<>>><<<<><<<>>><>>>><<>><<<<>><<<<>><<<<><>><<<<>>>><<>>><>><<<>><<>><<<<>><<>>><<<<>>><<<<>>><<><<<>>><<><<<><<>>>><>><<><<<<><<>><<<>>>><><<<<><><><>>><<<>>><<>>><<<>>>><<><<>><<>><<<><<<<>>>><>>>><<>>>><<<>>>><<>>>><<<>><>><<<>>><<>>>><<><<>>>><<<><<<<>>><<<>>>><<<>>><<<><>>><<>>><<<>>>><<<>>>><<<>>>><<<>><>><<<>>><<<<>>>><><<<>>>><<>>>><><>>><<>>>><<>><<>>>><<<>><<<>>>><<>>>><<<<>><<<>><<<>><<>><<<>>><<><>>><<><<><>>>><<<>>>><<<<>><<>>>><<<<>><><<<>>><<<<>><<>>><<<>><<>><<>><>>>><<><<>>>><>>>><<><><<<><<<<>>>><<<<>><<><<><<>>>><>>><<<><<<<><<>><<<><<>><><<><<<>>>><>>>><<>>>><>><><><<<><<><<>>><<<<><<>><<<>>>><<><<<<>>>><<<<>><><<<<>><<>><>><<<<>>>><<>>>><<<<><<<>><<>>><<<>>><>>><<>>>><<<><<<<><<>>>><<<<>><<<>>>><<<>><<<<><<<>><<<<>><<<>>>><<>>>><><>>><>>><<<>>>><<>>><<<>><>>>><<<>>>><<<<><<<>>><<<<>><<>><<>><<<><<<<>>><><>><<<><<<>>><<<><<<<>>>><><<<<>><<>><>>><<<>>>><<>>><<<>><<<<>>><<<>><<>><<>><<<<><<>>><>><<>>><<><<<><<<>><<<<>>><>><><<<<>>>><<<><<<>><>><<>>>><<<>>>><<<><<<>>><<>>><><>><<<>><>>>><<<<>>>><<<<>>><<<<>>><<<<>><<<<><><<>><>><<>>><<>><<><<<<>>>><<<<>>>><<>>>><<<<>>>><<>>>><>>>><<>><<><<<><><>><<<><<<<>>>><<<<>><<<>>>><<<<>>>><>>>><><<<<>><>>><<<<><<>>>><>><<<<>><<<><<<>>>><<>><<>>><>>>><<><>>>><<<<><<><<<>>>><<<>>>><<><>><<<>><<<>><<<<><<>>><>><<>>><<>>><>>>><<<>>><<>><<><><<>>>><<<>>><<<>><<<>>><<<>>>><<>>><>>>><>>>><>>><<>>>><<<>><<<<>><<<<>><<>>>><><>>>><<>>>><<<><<<<><<>>>><<<<>><<<<>>>><><<<><>><<<<>>>><>>>><<<<>>>><<><>><<<<><<<>>><<<<>><>><>>>><<>>>><>>><>>>><>><<>>><<<><>><>>>><<<>><<<>><<<<><<<<>>><<<>>><<<>>>><>><>>><<<<>><<<><<>>><>>><<><>>>><<<>>>><<<<>>>><><<<>>><<<<>>><>><>>>><<<>><<>>>><>>><<<<>>>><<<>><<<>>>><<<<>><<<>>><<<<><<<<>>>><><<<>>><<<<>>>><<<<>><<>><<<>>><>>><>><<>>><<<>><><<><>><<>><>><<<><<<<>>><<<>><<<><<<>>>><<>>><<<<><<><<<>>><<<<>>><<>><>>><>>><<<><<>>>><<<>><<<<><<<>><<<<>><>><<>><>>>><>>>><<>>><<<<>>><><><><<<>>><<<>><<>>><<<<>>>><>><<<>>>><<>><<<<>><<>><>><<<>>>><>>><<<<>>><>><<>>><<<>><<<<>>>><<<>><<>><>><<<<>><<<><<<>><>><<<><<<>>>><<<<>>><<><<<<><<<<>>>><<<><>><<><>>><<<><<><<<<>>><<>>>><>><<<<>><<<<>>><<>>>><>>><<<>>><<<>>>><<>>><>>>><<<<><>><<>>>><<<>>><>>><>><<<>>>><<><<<>>>><<><<<<>>>><<<<>>>><><<<<>>>><<<>>>><<><<<>>>><<>><>><>>><<<<><<<>>>><<<<>>>><<<><<>>>><<<><>>>><<<<>>>><>>><<<>><<<<><<>>><<>>><<>>><>>><<<><><><<<>>>><<>>>><<<<><>>>><<<>><<>>>><<><<<<><<<<>><><<<<><<>>>><<<>><<<<>><<>><<><<>>>><<><<<><<<<><<<<>>><<<>>>><<<<>>><><<<>>><>>>><>>><<<<>>><<<>>><<<<><<<<><<>><><<<>>><>>><<><<><<>><<<<>>>><<<>><<<><<<<>>><<<<>>><<>><<<<>><>>>><>><<<><>>>><<<>>><<><<>><<<><<<>><<<<>><<<<>><<<<><>>>><<><<<>><<<><<<>><<<<><<>>>><<<>><<<><<<>>><<<><<<<>>>><<>>>><<<>><<<<>>><<><<<<>>>><<<<>>>><<>><<><<>>><<>>>><<>>><<>>><<<>>>><<>>><<><<>>><<<>><<<<>>><<>>><<<>>><<<>>><>>>><<<>>>><<<<>>>><>>>><<<>>>><<<>>>><>>>><>>>><<<><<>><><>><<>><><<<>>>><><>>>><><<<><>>><<<>>><<<>>><<<<>><<<<><<<>>><<>><<<<>>><<<>><<>>>><<><<<<>>><>><<<>>>><<>><<<<>>><<<<>>><>>>><<><<<>><<<<>>>><<>>>><<<<><<>><<>>><>>><><<<<>><<><<<>>>><<<<>>>><<<>>><<>>><><><<<<>>>><<>><><<<<><<<<>>>><<>>>><><<<><>>><>>>><<<><<<<>><<<<>>>><<<><<>><>>>><<>>>><<>>><<<><<<><<<<><<<<>><<<<><<<>>><><<<>>><<<>>>><<><<<<>>><>><<><<><>>><<>>><<<<>>>><<>>>><><<<<>>>><<><<<>>><<<><<<<><<<<>><<<>><><<>><<<<><<<><><<<>>><>>>><<<<>>>><<>>><<>>>><<>>>><<<<>><<<>><<>>>><>><>><<>>><<<<><>>><<<>>><<<<>>>><<>><>>>><<><<<<><<>>>><<<>><>>>><<>><>><<<<><<<<>>><>>>><><<<<>><<<>>><><<><>>>><<>>><<<<>>><>>>><<<<>>>><><>><>><<<>><<>><<<><>>>><><<<<>>><<><<<>>>><<<>><<>>><<<>><<<>>>><<>>>><>><><<>>><<>><>>><<<><<<>>>><<<<><<>>><<<>>>><<<<><<<<>>>><>><<<>><<><>>>><><<>>>><<><<<<>><<>>><<><<<>>>><>><<<>><<>>><<>><>>><<<>>><<<<>>><<<<>>>><<<>>>><<<><<>><>><<>>><>>><<>>>><<>>><<<<>>><>>>><<<<>><<<<>>>><<<<><<<>>><>>><<<><<<<><<<>>>><>>><>>>><<>>>><<>>>><<<>>>><><<<>><<>>>><<<><<>><<>>><<>>><<<>><<<><<><<>>>><>>>><<<<><<>>>><<><<<<><>>><<>><<>>><<>>>><<<><>>><<>>><<>>><<>><<<>><<>><<<<>>>><<><<<>>>><<<<>>>><<<>>><><>>><<>>><<>><<<<>>><<><>>>><<<<>>><<>>><<<><>>><>>><<<>>><<<<><<<>>>><<<>>>><<<>><<<<>>>><<<<>>>><<>>><<<<>>>><>>>><<<>>><<<<>>>><<><<<>><<<>>><<<>>><<>>><<<<><>>><<<>>>><<>>>><<<>>>><>><<<<><<<<>><<>>>><<<<>>><>><<<>><<<<><<>>>><<<<>>><<<>>><>><<><<<>>>><<<<>>>><<<<>><<<<>>>><<<<>>><<>>><<<>>>><>>><<<<>><<<<>>>><>>>><<<<><<>>><<<><<>>>><>>><<<>>>><<>>>><<>>><<<<><<<<><<>>>><<>>>><><<<<><>><<<<>>>><<<>><<>><<>>>><<><<<><<<<><<<<>>><><<><<<<>><<>>>><<<<>>>><<<<>>>><<>>>><<<>>>><<>>><<<>>>><<<><<>><>>>><><>><>><<<<>>><<<<><<<>>>><<>>><<<>><><<>><<<<>>>><<<><<<>><<<<>>><<<<>><<>><<>>>><<>>>><>>>><>>><<><<>>>><<<>><><<>>>><<<>>><<>>><<<>>><>>><<<<>><<<<><<<>><<>>>><<<>>><>>><<<<>><<<<>>>><<<<>><<<<><<<<><>>>><><<>>>><>>><<<<>>><<<<>>><>>>><<<><<>>><>>>><><<<<><>>>><>><<<><<>>><<><<<<>>><<<<>>><<<>>><<<>>><<>>>><<>>>><<<>><<<><<>>>><<<<>>><>>><<<><<<><>>><<><<>>>><>>>><<<<>><><<>>>><>><<<>>><>><<<<>>>><<<>>>><<<><><<<>>>><<>><<<>>>><<<><<>>><<>>><>>>><<>><<<<>>>><<>><>><<<>>>><>><<<<><<>><>>>><<<<>>>><<><<<>>>><<>>><<<>>><<<>><>>><<<>>><<<><<<>><<<<>>><<<<>><<>>>><>>><<<<>>><<<<>>><>>>><<<<><<>><<<<><><<<<><<<<>><<<<>>><<>>><>><<><<>>>><><<<><<<<><<<>>><>>>><<<<>>><>>>><>>>><<<<>>><<><>>>><<<<>><<<>>><<>>><<<<>>>><>>>><>>><<>><<<>><<<<>>>><<<<>><>>>><<>>><<<><>>>><<<>>><<<><>>>><<<<>><>><<<>>>><>>>><>>><<><<>>>><<>>><<<<>><<<>>><<>>>><<<>>>><<>>>><<<>>><<>><>>><>>>><<>>>><<<<>><<<><>>><<<>>>><<>><<>><>><<>><>>>><>>><<<>>><>><>><<<><>><<<<>>><<<>>>><<<<><<<<><<><<><<<>>><<<><<>><<>><<<>>>><<>>><<>><<<<>><<>><<<<>><>>><<<>>><<>>>><<>>>><<<<><<>><<<<>><<<<><>><<<<><<<<><<<<>>><<<<>><<<<><<<>><>>><>>><<<<>>>><<<<>><<<<>><><<<>><>>><<><<><<<<>>><<>>>><<<<><<<<>><<>><>><<<>>>><<>>><<<<><>>>><<<<>>><<<>>>><<<>>><<<<>><<<<>>><<>>>><><<<<>>><<<<>><<>><<<><><<<><<<><<>>>><<><<<><<>><<<><<<<>>><<<>>><<<<><<>>><<<><<<>>>><><<>>>><<<<><<<<><<<>>><<>>><<<<>>>><<<><>>><<>><<>><<<<>>><<<<><>>><>>><<>>>><><<<<>><><<<<>>><<>><<<<>>>><<<<>><>>>><>><<<<>>>><<>>><<<>>>><<<>><><<>><<<>>><<<>>>><>>>><<<<>><<>><<<>>><<<>>>><<<>>><<<<><<>>>><<<<>><<><<>>>><<<><>>>><<<>>>><>>>><<>>>><<<><<<><<<<>><>>>><<<<>>><><<>><>>><>>><<<>>>><<><>><>><><<<><>><<>><<<<>>><<<>><<<><<>><<<>>>><<<>>><<<<>>><<<>>>><<<>>><<<<>><<<>><>><<<<>>><<<<><<>>><<<<>>><<<>>><>><<><>>><>>>><<<>><<>>><<>>>><<<>>>><>><<><>>>><<<<><<<<><>><<<<>>><<<>>><<<>>><<<<>><<<<>><<<>><>><<>><<<>><<>>><>><<<<>><>><>><<><>><<>>><<><>><>><>><<>>><<<><<><><<>>><<>>>><><<>>><>>>><<<>>><<>>><<<<>>>><>>><<>>>><<><<<>>>><<<<>><>>>><<<<>>>><<<>>>><>>>><<>>><>>>><><><<<><<<<>><>>><<<<><>>>><<<<>>><<<>><<<<><<<<><<<>>>><<>>>><<<><<<>><<>><<<><<>>><<<>>><><<<>>>><<>><<>><>>><<<<>>>><<<<>><>><<<<>>><<<<>>><><<<>>>><<<>>><<<<>><<<><<<<>><<<>>><<<<>><<<>>>><>>><<><<>>>><<<>><<<<>>>><<<>>>><<<<>><<>>>><>>><<<>><<<><<<<><<<>>>><<<<><<>>>><<<<>><<<<>>><>><<<>><<<<>>><>><<><<>>><<<>><<<<>>><><<<>>><<<>>>><<<<>><<>>>><>>><<<<>><<<><>><<<<>>>><<<>><<<><<<>>>><<<>>>><<<<><><>>><<<>><<<<>>>><<<>>>><>><<>><>><>><<<<>>>><<<<>><>><<<<>>>><<<>>><<>>>><<>>><<>><<>>>><<<>>><<>>>><<<>>>><>><<<<>>><<>>>><><<<>>><<<<><>>><>>><<>>>><<>>>><<<>>>><<>>><<<>>>><>>><<><<>>>><<<>><<>><<<><<<<><<<<>>>><<>><>>>><<>>>><>><<><><<><>>><>>>><<<>>><<<>>><<><<<>>>><<>>>><<<<><><>><<>>><<<<>><<<<>>>><>>><<<<>>><<<><<><<>><<>>><<<><<<<>>>><<>><<<>><<<<>>><<<>><<<<><<<>>>><>>><<>>>><<<>>>><<<><>>>><>>><>><<>>><<>>><<<<><>>>><<>>>><<<<><<><<<<>><<><<<>>>><<<<>><<><<<<>>><>><>>>><<<>>>><>><>>>><<<>>><<><<<<>>>><>>>><>>>><<<>><<>>><<<>>><<<><>><<><<<<><<<<>>>><<<<>><<<<><<<><<<<>>>><>>><<<>><<<<><>>><>><<>>><<>><<>><<<>>><><>><<<>>><><<>>><<<<>>><<<<><>><<<>><<<<>><<<<><<<>>><<<<>>>><><<>>><<<>><<><<>><<>>>><<<<><>>>><<>>><>><<<<>><<<<>>><<>>><<<>>><>><<<><<<>><<<>>>><><>>><<<<>>>><<><>>><<>>>><<<<>><<<<>><<<<><<>>><<>>>><<<><<>>><><<<>>><<<<>><><>>>><<<>>>><<>>>><<>>>><<<<>>><<<<>>>><<<><<<<>>><>>><><>><>>><<>>>><>>><<>>>><>>>><><>>><>>><<<<>><<<<>>><<<<><<<<>>><><>>>><<>><<<<>>><<<>>>><<<>><<<>>><<<>>><<<<><><<<<>>>><<<>>>><<><<<>>><<<>>><>><<><>><<<<>>><>>><<<>><><<<>><<<<>>><>><<<<>>><<>><<<>><<<>>>><<<>><<<>>><<>><>><>>><>>>><<<>>><<<<><<<>>>><<<<>><<<>><<<<>>>><<><<<>><<>>>><<<<><<>>><<<<>><>>>><>>>><<<>>>><>>><<<<>><<>>>><>>>><<<>>><<>>><<<<><<<<>><<><<<>>>><<<<>><<>>><>><><<>>><<<<>><<<<>>>><>>>><<>><<><<<<><<<<>><>><<<>><>><><<<<>>>><<<<><<<<><<<>>><>>><>>><<>><<>>>><<>>><<<>><<<<>>><>><>>><>>><>>><<<<>><><<<<>><<>>><<>>><<<<>>>><<<<>>>><>>><>>><>>>><<<>>>><<<>>><>>><<>>>><<<<><<<<>>><<<>>>><<<>>>><>>><<<<>><<<>><>>>><<>>>><<<<>>><<<<>>>><<<>>>><<<>><<>><<<>><<<>><<<<>>><<<<>>><<<<><<<>><<><><<<<>><<<<><<<>>><<<<>>>><>>>><>>><<>><><<<<>><<<<>><><>>>><<<<>>><<>><<>>>><>>><<<><<>>>><<<<>><<<>>>><<<>>><<<<>>><<>>><<<<><<<<>>><<>><<>>><>>>><<<><<><>>><>>>><<<<>>>><<<<>>><<<><><<<>>>><><<<<>>>><<<<>>>><<><<<<>>><><<>>>><<<>>>><<><<>>><<>>><<>>><<<<>>>><<<<><<<<>>>><>>>><>><<>><><<<><<>>>><<>>>><><<<<>><<>>>><<><<<><>>>><<<<>><<<>>>><<<>><>>><<<<>>><<<<>>><>><<>><><<<<>><<>><<<<>><>>>><>>><<<><<<<>><<<<><>><<<>><<<<>';
// const jetPattern = '>>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>';
const rocks = [
    {
        rows: [ 0b1111000 ],
        width: 4
    },
{
 rows: [
    0b0100000,
    0b1110000,
    0b0100000,
 ],
 width: 3,
},
{
    rows: [
        0b0010000,
        0b0010000, 
        0b1110000,
    ],
    width: 3,
},

{
rows: [
    0b1000000,
    0b1000000,
    0b1000000,
    0b1000000,
],
    width: 1,
},

{
    rows: [
        0b1100000,
        0b1100000,
    ],
    width: 2
}];

async function solve () {
    const MAX_X = 7;
    const TARGET_PIECE_COUNT = 1000000000000;
    let toprow = 0;

    let jetPatternPos = -1;
    const nextjet = () => jetPatternPos = jetPatternPos === jetPattern.length - 1 ? 0 : jetPatternPos + 1;

    // Bitmaps, 7 bits = 1 number
    let rows: number[] = [];
    const getRow = (rownr: number): number => {
        if (!(rownr in rows)) {
            rows[rownr] = 0b0000000;
        }

        return rows[rownr];
    }

    let rockPatternPos = 0;
    let rock = rocks[rockPatternPos];
    let rockBottomPos = 4;
    let rockLeftPos = 3;
    let rocksLanded = 0;

    const cyclemap: Map<string, { toprow: number, rocksLanded: number }> = new Map;

    const canMoveHorizontally = (dir: number): boolean => {
        const nextLeftPos = rockLeftPos + dir;
        if (nextLeftPos < 1 || (nextLeftPos + rock.width - 1) > MAX_X) {
            return false;
        }


        for (const [index, row] of [...rock.rows].reverse().entries()) {
            if ( ((row >> (nextLeftPos-1)) & getRow(rockBottomPos+index))  !== 0) {
                return false;
            }
        }

        return true;
    }

    const canMoveDown = (): boolean => {
        if (rockBottomPos === 1) {
            return false;
        }

        for (const [index, row] of [...rock.rows].reverse().entries()) {
            if ( ((row >> (rockLeftPos-1)) & getRow(rockBottomPos + index - 1))  !== 0) {
                return false;
            }
        }
        return true;
    }

    let skippedHeight = 0;

    while (rocksLanded < TARGET_PIECE_COUNT) {
        const xshift = jetPattern[nextjet()] === '<' ? -1 : +1;
        if (canMoveHorizontally(xshift)) {
            rockLeftPos += xshift;
        }

        if (canMoveDown()) {
            rockBottomPos--;
            continue;
        }

        // Place rock
        rocksLanded++;
        for (const [index, row] of [...rock.rows].reverse().entries()) {
            rows[rockBottomPos + index] = (row >> (rockLeftPos-1)) | getRow(rockBottomPos + index)
        }
        toprow = Math.max(toprow, rockBottomPos + rock.rows.length - 1);

        // Loop detection: first time seeing repeating rock & wind position pair
        if (!skippedHeight && (rocksLanded > (jetPattern.length * rocks.length)) && cyclemap.has(`${rockPatternPos}:${jetPatternPos}`)) {
            const loop = cyclemap.get(`${rockPatternPos}:${jetPatternPos}`)!!;
            // Skip as many loop iterations as possible
            const skipLoopCount = Math.floor((TARGET_PIECE_COUNT - rocksLanded) / (rocksLanded - loop.rocksLanded));

            skippedHeight = skipLoopCount * (toprow - loop.toprow);
            console.log('Found loop', { loop, skipLoopCount, skippedHeight, rocksLanded, new: skipLoopCount * (rocksLanded - loop.rocksLanded), rockPatternPos, jetPatternPos, rockBottomPos, rockLeftPos, toprow });

            rocksLanded += skipLoopCount * (rocksLanded - loop.rocksLanded);
        }

        cyclemap.set(`${rockPatternPos}:${jetPatternPos}`, { toprow, rocksLanded });

        // Start new rock
        rock = rocks[rocksLanded % rocks.length];
        rockLeftPos = 3;
        rockBottomPos = toprow + 4;
    }

    return toprow + skippedHeight;
}

solve().then(console.log); 
// 1586206896526 -- too high, had to limit start of loop detection to when rocks * directions have passed
// 1585673352422 -- correct