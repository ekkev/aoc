const solve = (input, iterations, repeat = 10000, offset = 0) => {
    if (offset <= input.length*repeat/2)
        throw new Error(`Test assumptions failed ${offset}`);

    signal = input.repeat(repeat).slice(offset).split('').map(v => +v);

    let newSignal = [];
    for (let iteration = 1; iteration <= iterations; iteration++) {
        let runningSum = 0;
        // Assumption: all multpliers are ones - add a cumulative sum from the end for O(n)
        for (let pos = signal.length - 1; pos >= 0; pos--) {
            runningSum += signal[pos];
            newSignal[pos] = runningSum % 10;
        }

        signal = newSignal;
        newSignal = [];
    }

    return signal.slice(0,8).join('');
}

test = `80871224585914546619083218645595`;
console.log(solve(test, 100, 1, 24), 63195595); // 24176176480919046114038763195595

test = `03036732577212944063491565474664`;
console.log(solve(test, 100, 10000, 303673), 84462026);

test = `02935109699940807407585447034323`;
console.log(solve(test, 100, 10000, 0293510), 78725270);

test = ``;
console.log(solve(test, 100, 10000, 5977269), 52825021);
